@model ClassRoomViewModel

@{
    ViewData["Title"] = "Details";
}

<style>
    .media-container iframe,
    .media-container video {
        max-width: 100%;
        /* Đảm bảo video không bị tràn */
        /* Giữ nguyên tỷ lệ */
        display: block;
        margin: 0 auto;
        /* Căn giữa video */
    }

    input.form-control,
    textarea.form-control {
        margin-top: 15px;
        /* Khoảng cách từ trên */
    }
</style>

<h1 class="card-header"
    style="background: url(@Model.ClassRoom!.ImageUrl) no-repeat center center; background-size: cover; color: white; line-height: 1.5; font-size: 1.5em; min-height: 200px; display: flex; align-items: flex-end; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);">
    @Model.ClassRoom!.Name</h1>
@if (TempData["ConfirmPayment"] != null)
{
    <div class="alert alert-warning text-center">
        <p>@TempData["ConfirmPayment"]</p>
        <form asp-action="ConfirmPayment" asp-controller="ClassRooms" method="post">
            <input type="hidden" name="code" value="@TempData["ClassCode"]" />
            <button type="submit" class="btn btn-success">Xác nhận thanh toán</button>
            <a href="@Url.Action("Index", "Pays")" class="btn btn-danger">Nạp tiền</a>
        </form>
    </div>
}
<hr>
<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link active" id="post-tab" data-toggle="tab" href="#post" role="tab" aria-controls="post"
            aria-selected="true">Active</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="assignment-tab" data-toggle="tab" href="#assignment" role="tab"
            aria-controls="assignment" aria-selected="false">Assignment</a>
    </li>
</ul>
<!-- Nội dung Tabs -->
<div class="tab-content" id="classroomTabsContent">
    <!-- Tab: Post -->
    <div class="tab-pane fade show active" id="post" role="tabpanel" aria-labelledby="post-tab">
        <div class="row">
            <div class="col-md-4">
                <div class="card shadow-sm">
                    <div class="card-header bg-white">
                        <span class="font-weight-bold">Class code</span>
                        <div class="dropdown float-right">
                            <button class="btn btn-tool btn-sm dropdown-toggle mr-2" type="button"
                                id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true"
                                aria-expanded="false">
                            </button>
                            <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton">
                                <a class="dropdown-item" href="#"
                                    onclick="copyCodeToClipboard('@Model.ClassRoom.Code')"><i
                                        class="fas fa-copy mr-2"></i>Copy code</a>
                                <a class="dropdown-item" href="#" onclick="changeCode('@Model.ClassRoom.Id')">
                                    <i class="fas fa-edit mr-2"></i>Change code
                                </a>
                            </div>
                        </div>
                    </div>
                    <h4 class="card-text m-auto pt-3 pb-3" id="classCodeDisplay">@Model.ClassRoom.Code</h4>
                </div>
                <div class="card bg-c-blue order-card">
                    <div class="card-block">
                        <h6>Members</h6>
                        <h2>@Model.MembersCount</h2>
                        <div class="row">
                            @foreach (var participant in Model.Participants!)
                            {
                                <div class="col-md-12">
                                    <div class="card shadow-sm">
                                        <div class="card-body row">
                                            <div class="col-4">
                                                <img src="@(!string.IsNullOrEmpty(participant.ImageUrl) ? participant.ImageUrl : Url.Content("~/files/assets/images/user.png"))"
                                                    class="rounded-circle" style="width: 60px; height: 60px;"
                                                    alt="Participant Image">
                                            </div>
                                            <div class="col-8">
                                                <h5 class="text-muted">@participant.FullName</h5>
                                                <p style="font-size: 10px;" class="text-muted">@participant.UserName</p>
                                            </div>
                                            <!-- Hiển thị ảnh đại diện nếu có, nếu không thì dùng ảnh mặc định -->
                                            
                                            
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <i class="card-icon feather icon-users"></i>
                    </div>
                </div>
            </div>
            <div class="col-md-8">
                <input data-toggle="modal" data-target="#postModal" type="text" class="form-control"
                    placeholder="Create a new post now">

                <!-- Modal -->
                <div class="modal fade" id="postModal" tabindex="-1" role="dialog" aria-labelledby="postModalLabel"
                    aria-hidden="true">
                    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="postModalLabel">Create a new post</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <form>
                                    @Html.AntiForgeryToken()
                                    <div class="mb-3">
                                        <label for="ClassRoomId" class="form-label">Lớp học</label>
                                        @Model.ClassRoom.Name
                                        <input type="hidden" name="ClassRoomId" value="@Model.ClassRoom.Id" />
                                    </div>
                                    <div class="mb-3">
                                        <label for="Title" class="form-label">Title</label>
                                        <input type="text" id="postTitle" name="Title" class="form-control" />
                                    </div>
                                    <div class="mb-3">
                                        <label for="Content" class="form-label">Message</label>
                                        <textarea id="postMessage" name="Message" style="height: 400px;"></textarea>
                                    </div>
                                    <button type="button" class="btn btn-primary" onclick="createPost()">Post</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>

                @foreach (var post in Model.Posts!)
                {
                    var timeSpan = DateTime.Now - post.CreateDate;

                    string timeString;
                    if (timeSpan.TotalSeconds < 60)
                    {
                        timeString = "now";
                    }
                    else if (timeSpan.TotalMinutes < 60)
                    {
                        timeString = $"{timeSpan.Minutes} minutes ago";
                    }
                    else if (timeSpan.TotalHours < 24)
                    {
                        timeString = $"{timeSpan.Hours} hours ago";
                    }
                    else if (timeSpan.TotalDays < 7)
                    {
                        timeString = $"{timeSpan.Days} days ago";
                    }
                    else
                    {
                        timeString = post.CreateDate.ToString("dd/MM/yyyy");
                    }

                    <div class="card shadow-sm mt-2">
                        <div class="card-header bg-white">
                            <span class="font-weight-bold">@post.Title</span>
                            <span class="float-right">@timeString</span>
                            <div class="dropdown float-right">
                                <button class="btn btn-tool btn-sm dropdown-toggle mr-2" type="button"
                                    id="dropdownMenuButton_@post.Id" data-toggle="dropdown" aria-haspopup="true"
                                    aria-expanded="false">
                                </button>
                                <div class="dropdown-menu dropdown-menu-right"
                                    aria-labelledby="dropdownMenuButton_@post.Id">
                                    <a class="dropdown-item" href="#" onclick="deletePost(@post.Id)"><i
                                            class="fas fa-trash mr-2"></i>Delete</a>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="media-container">
                                @Html.Raw(post.Message)
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
    <!-- Tab: Assignment -->
    <div class="tab-pane fade" id="assignment" role="tabpanel" aria-labelledby="assignment-tab">
        <h3>Assignments</h3>
        <!-- Button để mở Modal tạo bài tập -->
        <input data-toggle="modal" data-target="#assignmentModal" type="text" class="form-control"
            placeholder="Create a new assignment now">

        <!-- Modal: Create Assignment -->
        <div class="modal fade" id="assignmentModal" tabindex="-1" role="dialog" aria-labelledby="assignmentModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="assignmentModalLabel">Create a new assignment</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form id="assignmentForm" enctype="multipart/form-data">
                            @Html.AntiForgeryToken()
                            <div class="mb-3">
                                <label for="ClassRoomId" class="form-label">Lớp học</label>
                                @Model.ClassRoom.Name
                                <input type="hidden" name="ClassRoomId" value="@Model.ClassRoom.Id" />
                            </div>
                            <div class="mb-3">
                                <label for="Title" class="form-label">Title</label>
                                <input type="text" id="assignmentTitle" name="Title" class="form-control" required />
                            </div>
                            <div class="mb-3">
                                <label for="Description" class="form-label">Description</label>
                                <textarea id="assignmentDescription" name="Description" class="form-control" rows="5"
                                    required></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="FileUrl" class="form-label">Upload File</label>
                                <input type="file" id="assignmentFileUrl" name="FileUrl" class="form-control" />
                            </div>
                            <div class="mb-3">
                                <label for="DueDate" class="form-label">Due Date</label>
                                <input type="date" id="dueDate" name="DueDate" class="form-control" required />
                            </div>
                            <button type="button" class="btn btn-primary" onclick="createAssignment()">Create
                                Assignment</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Hiển thị các bài tập đã tạo -->
        @foreach (var assignment in Model.Assignments!)
        {
            <a href="@Url.Action("Details", "Assignments", new { id = assignment.Id })" class="text-decoration-none">
            <div class="card shadow-sm mt-2 hover-card">
                <div class="card-header bg-white">
                    <span class="font-weight-bold text-primary">@assignment.Title</span>
                    <span class="float-right">Hạn: @assignment.DueDate.ToString("dd/MM/yyyy")</span>
                </div>
                <div class="card-body">
                    <p>@assignment.Description</p>
                    @if (!string.IsNullOrEmpty(assignment.FileUrl))
                    {
                        <a href="@assignment.FileUrl" class="btn btn-info btn-sm">Download File</a>
                    }
                </div>
            </div>
            </a>
        }
    </div>
</div>

<div>
    <hr />
</div>

@section Scripts {
    <script>
        function showToast(message, type = 'info', duration = 5000) {
            var toastEl = document.getElementById('adminToast');
            var toastBody = document.getElementById('toastMessage');
            var toastContainer = toastEl.querySelector('.toast');

            // Cập nhật nội dung thông báo
            toastBody.innerText = message;

            // Xóa class màu cũ trước khi thêm mới
            toastContainer.classList.remove('bg-success', 'bg-danger', 'bg-warning', 'bg-info', 'bg-primary', 'bg-dark');

            // Gán màu theo loại thông báo
            switch (type) {
                case 'success':
                    toastContainer.classList.add('bg-success'); // Xanh lá
                    break;
                case 'error':
                    toastContainer.classList.add('bg-danger'); // Đỏ
                    break;
                case 'warning':
                    toastContainer.classList.add('bg-warning'); // Vàng
                    break;
                case 'info':
                    toastContainer.classList.add('bg-info'); // Xanh dương
                    break;
                default:
                    toastContainer.classList.add('bg-dark'); // Màu tối (mặc định)
            }

            // **Tạo instance Bootstrap Toast**
            var toastInstance = new bootstrap.Toast(toastContainer, {
                autohide: duration > 0, // Nếu duration = 0, không tự động ẩn
                delay: duration || 5000 // Mặc định 5 giây
            });

            // Hiển thị Toast
            toastInstance.show();
        }

        function createPost() {
            var form = $('#postModal form');
            $.ajax({
                url: '@Url.Action("Create", "Posts")',  // URL của phương thức Create
                type: 'POST',
                data: form.serialize(),
                success: function (result) {
                    if (result.success) {
                        $('#postModal').modal('hide');
                        alert(result.message);  // Hiển thị thông báo thành công
                        location.reload();  // Reload trang hoặc cập nhật danh sách bài viết theo yêu cầu
                    }
                },
                error: function () {
                    alert('Có lỗi xảy ra khi tạo bài viết.');
                }
            });
        }
        function createAssignment() {
            var title = $('#assignmentTitle').val();
            var description = $('#assignmentDescription').val();
            var fileUrl = $('#assignmentFileUrl').val();
            var dueDate = $('#dueDate').val();
            var classRoomId = $('input[name="ClassRoomId"]').val();  // ClassRoomId dưới dạng GUID

            // Kiểm tra nếu có trường nào bị rỗng
            if (!title || !description || !dueDate || !classRoomId) {
                alert("Vui lòng điền đầy đủ thông tin.");
                return;
            }

            // Gửi dữ liệu qua AJAX
            $.ajax({
                url: '@Url.Action("Create", "Assignments")',
                type: 'POST',
                data: {
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val(),
                    Title: title,
                    Description: description,
                    FileUrl: fileUrl,
                    DueDate: dueDate,
                    ClassRoomId: classRoomId  // Đảm bảo là GUID hợp lệ
                },
                success: function (result) {
                    if (result.success) {
                        $('#assignmentModal').modal('hide');
                        alert("Bài tập đã được tạo thành công!");
                        location.reload();  // Reload lại trang để hiển thị bài tập mới
                    } else {
                        alert("Có lỗi xảy ra khi tạo bài tập: " + result.message);
                    }
                },
                error: function () {
                    alert('Có lỗi xảy ra khi gửi yêu cầu tạo bài tập.');
                }
            });
        }

        function deletePost(postId) {
            if (!confirm("Bạn có chắc muốn xóa bài viết này?")) {
                return;
            }

            $.ajax({
                url: '@Url.Action("Delete", "Posts")',
                type: 'POST',
                data: { id: postId, __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() },
                success: function (result) {
                    if (result.success) {
                        alert(result.message);
                        location.reload();
                    } else {
                        alert("Lỗi: " + result.message);
                    }
                },
                error: function () {
                    alert('Có lỗi xảy ra khi xóa bài viết.');
                }
            });
        }

        function copyCodeToClipboard(code) {
            navigator.clipboard.writeText(code).then(function () {
                showToast('Code copied to clipboard!');
            }, function (err) {
                console.error('Could not copy text: ', err);
            });
        }
        function changeCode(classRoomId) {
            if (!confirm("Bạn có chắc muốn đổi mã lớp không?")) return;

            $.ajax({
                url: '@Url.Action("ChangeCode", "ClassRooms")',
                type: 'POST',
                data: { id: classRoomId },
                success: function (response) {
                    if (response.success) {
                        $('#classCodeDisplay').text(response.newCode);
                        showToast("Mã lớp đã được cập nhật!", "success");
                    } else {
                        showToast("Lỗi khi đổi mã lớp!", "error");
                    }
                },
                error: function () {
                    showToast("Có lỗi xảy ra, vui lòng thử lại!", "error");
                }
            });
        }
        function showToast(message, type = 'info', duration = 5000) {
            var toastEl = document.getElementById('adminToast');
            var toastBody = document.getElementById('toastMessage');
            var toastContainer = toastEl.querySelector('.toast');

            toastBody.innerText = message;
            toastContainer.classList.remove('bg-success', 'bg-danger', 'bg-warning', 'bg-info', 'bg-primary', 'bg-dark');

            switch (type) {
                case 'success': toastContainer.classList.add('bg-success'); break;
                case 'error': toastContainer.classList.add('bg-danger'); break;
                case 'warning': toastContainer.classList.add('bg-warning'); break;
                case 'info': toastContainer.classList.add('bg-info'); break;
                default: toastContainer.classList.add('bg-dark');
            }

            var toastInstance = new bootstrap.Toast(toastContainer, { autohide: duration > 0, delay: duration || 5000 });
            toastInstance.show();
        }
        var editor = new FroalaEditor('#postMessage', {
            imageUploadURL: '/File/UploadImage',
            videoUploadURL: '/File/UploadVideo',
            imageDeleteURL: '/File/DeleteFile',
            imageAllowedTypes: ['jpeg', 'jpg', 'png', 'gif'],
            videoAllowedTypes: ['mp4', 'webm', 'ogg'],
            toolbarButtons: ['bold', 'italic', 'underline', 'strikeThrough', 'align', 'undo', 'redo'],
            pastePlain: true,
            placeholderText: 'Input your message...',
        });
    </script>
    <script>
        $(document).ready(function () {
            $('#post-tab').on('click', function () {
                $('#assignment').removeClass('show active');
                $('#participants').removeClass('show active');
                $('#post').addClass('show active');
            });

            $('#assignment-tab').on('click', function () {
                $('#post').removeClass('show active');
                $('#participants').removeClass('show active');
                $('#assignment').addClass('show active');
            });
            $('#participants-tab').on('click', function () {
                $('#post').removeClass('show active');
                $('#assignment').removeClass('show active');
                $('#participants').addClass('show active');
        });
    </script>
    <style>
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
        }
    </style>
}

