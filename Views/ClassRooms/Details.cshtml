@model ClassRoomViewModel

@{
    ViewData["Title"] = "Details";
}

<!-- Add Font Awesome CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<style>
    .media-container iframe,
    .media-container video {
        max-width: 100%;
        /* Đảm bảo video không bị tràn */
        /* Giữ nguyên tỷ lệ */
        display: block;
        margin: 0 auto;
        /* Căn giữa video */
    }

    input.form-control,
    textarea.form-control {
        margin-top: 15px;
        /* Khoảng cách từ trên */
    }

    .hover-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

    /* Make sure icons are visible */
    .fa,
    .fas,
    .far,
    .fab,
    .fal {
        display: inline-block !important;
        font-style: normal !important;
        font-variant: normal !important;
        text-rendering: auto !important;
        line-height: 1 !important;
    }
</style>

<h1 class="card-header"
    style="background: url(@Model.ClassRoom!.ImageUrl) no-repeat center center; background-size: cover; color: white; line-height: 1.5; font-size: 1.5em; min-height: 200px; display: flex; align-items: flex-end; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);">
    @Model.ClassRoom!.Name</h1>
@if (TempData["ConfirmPayment"] != null)
{
    <div class="alert alert-warning text-center">
        <p>@TempData["ConfirmPayment"]</p>
        <form asp-action="ConfirmPayment" asp-controller="ClassRooms" method="post">
            <input type="hidden" name="code" value="@TempData["ClassCode"]" />
            <button type="submit" class="btn btn-success">Xác nhận thanh toán</button>
            <a href="@Url.Action("Index", "Pays")" class="btn btn-danger">Nạp tiền</a>
        </form>
    </div>
}
<hr>
<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link active" id="post-tab" data-toggle="tab" href="#post" role="tab" aria-controls="post"
            aria-selected="true"><i class="fas fa-stream mr-2"></i>News Feed</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="lecture-tab" data-toggle="tab" href="#lecture" role="tab" aria-controls="lecture"
            aria-selected="false"><i class="fas fa-book-open mr-2"></i>Lecture</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="assignment-tab" data-toggle="tab" href="#assignment" role="tab"
            aria-controls="assignment" aria-selected="false"><i class="fas fa-tasks mr-2"></i>Assignment</a>
    </li>
</ul>
<!-- Nội dung Tabs -->
<div class="tab-content" id="classroomTabsContent">
    <!-- Tab: Post -->
    <div class="tab-pane fade show active" id="post" role="tabpanel" aria-labelledby="post-tab">
        <div class="row mt-3">
            <div class="col-md-4">
                <!-- Class Code Card -->
                <div class="card shadow-sm mb-3 border-0 rounded-lg">
                    <div class="card-header bg-white border-0">
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="font-weight-bold"><i class="fas fa-key text-primary mr-2"></i>Class code</span>
                            <div class="dropdown">
                                <button class="btn btn-light btn-sm rounded-circle" type="button"
                                    id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true"
                                    aria-expanded="false">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenuButton">
                                    <a class="dropdown-item" href="#"
                                        onclick="copyCodeToClipboard('@Model.ClassRoom.Code')"><i
                                            class="fas fa-copy mr-2 text-primary"></i>Copy code</a>
                                    <a class="dropdown-item" href="#" onclick="changeCode('@Model.ClassRoom.Id')">
                                        <i class="fas fa-edit mr-2 text-primary"></i>Change code
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body text-center py-4">
                        <div class="bg-light py-3 px-4 rounded mb-2">
                            <h4 class="card-text m-0 font-weight-bold text-primary" id="classCodeDisplay">
                                @Model.ClassRoom.Code</h4>
                        </div>
                        <small class="text-muted">Share this code with students to join your class</small>
                    </div>
                </div>

                <!-- Members Card -->
                <div class="card shadow-sm border-0 rounded-lg mb-3">
                    <div class="card-header bg-primary text-white border-0">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0"><i class="fas fa-users mr-2"></i>Members</h5>
                            <span class="badge badge-light">@Model.MembersCount</span>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div class="p-3 border-bottom">
                            <div class="position-relative">
                                <input type="text" class="form-control rounded-pill bg-light pl-4 pr-4" id="member-search"
                                    placeholder="Search members..." oninput="searchMembers(this.value)">
                                <span class="position-absolute" style="top: 50%; transform: translateY(-50%); left: 12px;">
                                    <i class="fas fa-search text-muted"></i>
                                </span>
                            </div>
                        </div>
                        <div class="members-list" style="max-height: 400px; overflow-y: auto;" id="members-container">
                            @foreach (var participant in Model.Participants!)
                            {
                                <div class="d-flex align-items-center p-3 border-bottom hover-card member-item"
                                    data-username="@participant.UserName.ToLower()"
                                    data-fullname="@participant.FullName.ToLower()">
                                    <div class="mr-3">
                                        <img src="@(!string.IsNullOrEmpty(participant.ImageUrl) ? participant.ImageUrl : Url.Content("~/files/assets/images/user.png"))"
                                            class="rounded-circle" style="width: 50px; height: 50px; object-fit: cover;"
                                            alt="@participant.FullName">
                                    </div>
                                    <div class="flex-grow-1">
                                        <h6 class="mb-0 font-weight-bold">@participant.FullName</h6>
                                        <small class="text-muted">@participant.UserName</small>
                                    </div>
                                    <div>
                                        <button class="btn btn-light btn-sm rounded-circle">
                                            <i class="fas fa-ellipsis-v text-muted"></i>
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>
                        <div id="no-members-found" class="text-center py-4 d-none">
                            <i class="fas fa-user-slash fa-2x text-muted mb-2"></i>
                            <p class="text-muted">No members found</p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-8">
                <input data-toggle="modal" data-target="#postModal" type="text"
                    class="form-control form-control-lg shadow-sm" placeholder="What's on your mind?"
                    style="border-radius: 20px; padding-left: 20px;">

                <!-- Modal -->
                <div class="modal fade" id="postModal" tabindex="-1" role="dialog" aria-labelledby="postModalLabel"
                    aria-hidden="true">
                    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="postModalLabel">Create a new post</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <form>
                                    @Html.AntiForgeryToken()
                                    <div class="mb-3">
                                        <label for="ClassRoomId" class="form-label">Lớp học</label>
                                        @Model.ClassRoom.Name
                                        <input type="hidden" name="ClassRoomId" value="@Model.ClassRoom.Id" />
                                    </div>
                                    <div class="mb-3">
                                        <label for="Title" class="form-label">Title</label>
                                        <input type="text" id="postTitle" name="Title" class="form-control" />
                                    </div>
                                    <div class="mb-3">
                                        <label for="Content" class="form-label">Message</label>
                                        <textarea id="postMessage" name="Message" style="height: 400px;"></textarea>
                                    </div>
                                    <button type="button" class="btn btn-primary" onclick="createPost()">Post</button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>

                @foreach (var post in Model.Posts!)
                {
                    var timeSpan = DateTime.Now - post.CreateDate;

                    string timeString;
                    if (timeSpan.TotalSeconds < 60)
                    {
                        timeString = "now";
                    }
                    else if (timeSpan.TotalMinutes < 60)
                    {
                        timeString = $"{timeSpan.Minutes} minutes ago";
                    }
                    else if (timeSpan.TotalHours < 24)
                    {
                        timeString = $"{timeSpan.Hours} hours ago";
                    }
                    else if (timeSpan.TotalDays < 7)
                    {
                        timeString = $"{timeSpan.Days} days ago";
                    }
                    else
                    {
                        timeString = post.CreateDate.ToString("dd/MM/yyyy");
                    }

                    <div class="card shadow-sm mt-3 hover-card">
                        <div class="card-header bg-white d-flex justify-content-between align-items-center">
                            <h5 class="mb-0 font-weight-bold">@post.Title</h5>
                            <div class="d-flex align-items-center">
                                <span class="text-muted mr-3"><i class="far fa-clock mr-1"></i>@timeString</span>
                                <div class="dropdown">
                                    <button class="btn btn-light btn-sm rounded-circle" type="button"
                                        id="dropdownMenuButton_@post.Id" data-toggle="dropdown" aria-haspopup="true"
                                        aria-expanded="false">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <div class="dropdown-menu dropdown-menu-right"
                                        aria-labelledby="dropdownMenuButton_@post.Id">
                                        <a class="dropdown-item" href="#" onclick="deletePost(@post.Id)"><i
                                                class="fas fa-trash mr-2"></i>Delete</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="media-container">
                                @Html.Raw(post.Message)
                            </div>
                        </div>
                        <div class="card-footer bg-white">
                            <div class="d-flex justify-content-between">
                                <button class="btn btn-light btn-sm like-button" data-post-id="@post.Id"
                                    onclick="likePost(@post.Id)">
                                    <i class="far fa-thumbs-up mr-1" aria-hidden="true"></i> <span
                                        class="like-count">0</span> Like
                                </button>
                                <button class="btn btn-light btn-sm" onclick="toggleComments(@post.Id)">
                                    <i class="far fa-comment mr-1" aria-hidden="true"></i> Comment
                                </button>
                                <button class="btn btn-light btn-sm">
                                    <i class="fas fa-share mr-1" aria-hidden="true"></i> Share
                                </button>
                            </div>

                            <!-- Comment section (initially hidden) -->
                            <div id="comments-section-@post.Id" class="comments-section mt-3" style="display: none;">
                                <hr>
                                <div class="comments-container" id="comments-container-@post.Id">
                                    <!-- Comments will be loaded here -->
                                    <div class="text-center text-muted py-3">
                                        <p><i class="far fa-comment-dots fa-2x mb-2"></i><br>No comments yet</p>
                                    </div>
                                </div>
                                <div class="d-flex mt-2">
                                    <div class="mr-2">
                                        <img src="@Url.Content("~/files/assets/images/user.png")" class="rounded-circle"
                                            style="width: 40px; height: 40px; object-fit: cover;">
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="input-group">
                                            <input type="text" class="form-control" id="comment-text-@post.Id"
                                                placeholder="Write a comment...">
                                            <div class="input-group-append">
                                                <button class="btn btn-primary" type="button"
                                                    onclick="addComment(@post.Id)">
                                                    <i class="fas fa-paper-plane"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Tab: Lecture -->
    <div class="tab-pane fade" id="lecture" role="tabpanel" aria-labelledby="lecture-tab">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h3 class="mb-0"><i class="fas fa-book-open text-primary me-2"></i>Lectures</h3>
            <div>
                <button class="btn btn-outline-primary rounded-pill me-2" data-toggle="modal" data-target="#lessonModal">
                    <i class="fas fa-folder-plus me-2"></i>New Lesson
                </button>
                <button class="btn btn-primary rounded-pill shadow-sm" data-toggle="modal" data-target="#lectureModal">
                    <i class="fas fa-video me-2"></i>Add Lecture
                </button>
            </div>
        </div>

        <div class="mb-4 p-3 bg-light rounded-lg border-left border-primary" style="border-left-width: 4px !important;">
            <div class="d-flex align-items-center">
                <i class="fas fa-info-circle text-primary me-3 fa-lg"></i>
                <p class="mb-0">Organize your course content into lessons and lectures. Add videos by URL or upload files to create comprehensive learning materials.</p>
            </div>
        </div>

        <!-- Modal: Create Lesson -->
        <div class="modal fade" id="lessonModal" tabindex="-1" role="dialog" aria-labelledby="lessonModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content border-0 shadow">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title" id="lessonModalLabel">
                            <i class="fas fa-folder-plus me-2"></i>Create a new lesson
                        </h5>
                        <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form id="lessonForm">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="ClassRoomId" value="@Model.ClassRoom.Id" />
                            
                            <div class="mb-3">
                                <label for="LessonTitle" class="form-label text-muted">Lesson Title</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-light"><i class="fas fa-layer-group"></i></span>
                                    <input type="text" id="lessonTitle" name="Title" class="form-control" 
                                        placeholder="Example: Lesson 1: Introduction" required />
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="LessonDescription" class="form-label text-muted">Description (Optional)</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-light"><i class="fas fa-align-left"></i></span>
                                    <textarea id="lessonDescription" name="Description" class="form-control" rows="3"
                                        placeholder="Describe what students will learn in this lesson"></textarea>
                                </div>
                            </div>
                            
                            <div class="text-end mt-4">
                                <button type="button" class="btn btn-light me-2" data-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-primary" onclick="createLesson()">
                                    <i class="fas fa-check me-2"></i>Create Lesson
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal: Create Lecture -->
        <div class="modal fade" id="lectureModal" tabindex="-1" role="dialog" aria-labelledby="lectureModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
                <div class="modal-content border-0 shadow">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title" id="lectureModalLabel">
                            <i class="fas fa-video me-2"></i>Add a new lecture
                        </h5>
                        <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form id="lectureForm" enctype="multipart/form-data">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="ClassRoomId" value="@Model.ClassRoom.Id" />
                            
                            <div class="mb-3">
                                <label for="LessonSelect" class="form-label text-muted">Select Lesson</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-light"><i class="fas fa-layer-group"></i></span>
                                    <select id="lessonSelect" name="LessonId" class="form-control" required>
                                        <option value="">Choose a lesson...</option>
                                        <!-- Dynamic options will be loaded here -->
                                        <option value="lesson1">Lesson 1: Introduction</option>
                                        <option value="lesson2">Lesson 2: Basic Concepts</option>
                                    </select>
                                </div>
                                <small class="text-muted">The lecture will be added to this lesson</small>
                            </div>
                            
                            <div class="mb-3">
                                <label for="lectureTitle" class="form-label text-muted">Lecture Title</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-light"><i class="fas fa-heading"></i></span>
                                    <input type="text" id="lectureTitle" name="Title" class="form-control" 
                                        placeholder="Enter a descriptive title for this lecture" required />
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="lectureDescription" class="form-label text-muted">Description</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-light"><i class="fas fa-align-left"></i></span>
                                    <textarea id="lectureDescription" name="Description" class="form-control" rows="3"
                                        placeholder="Briefly describe what this lecture covers" required></textarea>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label text-muted">Lecture Content Type</label>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="contentType" id="videoUrlOption" 
                                        value="videoUrl" checked onchange="toggleContentType()">
                                    <label class="form-check-label" for="videoUrlOption">Video URL</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="contentType" id="uploadOption" 
                                        value="upload" onchange="toggleContentType()">
                                    <label class="form-check-label" for="uploadOption">Upload File</label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input" type="radio" name="contentType" id="textOption" 
                                        value="text" onchange="toggleContentType()">
                                    <label class="form-check-label" for="textOption">Text Content</label>
                                </div>
                            </div>
                            
                            <div id="videoUrlContent" class="content-type-section mb-3">
                                <label for="videoUrl" class="form-label text-muted">Video URL</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-light"><i class="fas fa-link"></i></span>
                                    <input type="url" id="videoUrl" name="VideoUrl" class="form-control" 
                                        placeholder="https://www.youtube.com/watch?v=..." />
                                </div>
                                <small class="text-muted">Supports YouTube, Vimeo, and other video platforms</small>
                            </div>
                            
                            <div id="uploadContent" class="content-type-section mb-3" style="display: none;">
                                <label for="lectureFileUrl" class="form-label text-muted">Upload Video or Document</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-light"><i class="fas fa-file-upload"></i></span>
                                    <input type="file" id="lectureFileUrl" name="FileUrl" class="form-control" />
                                </div>
                                <small class="text-muted">Supported formats: MP4, PDF, PPTX, DOCX (max 100MB)</small>
                            </div>
                            
                            <div id="textContent" class="content-type-section mb-3" style="display: none;">
                                <label for="lectureContent" class="form-label text-muted">Text Content</label>
                                <textarea id="lectureContent" name="Content" style="height: 300px;" 
                                    placeholder="Enter your lecture content here..."></textarea>
                                <small class="text-muted">Use the rich text editor to format your content</small>
                            </div>
                            
                            <div class="text-end mt-4">
                                <button type="button" class="btn btn-light me-2" data-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-primary" onclick="createLecture()">
                                    <i class="fas fa-paper-plane me-2"></i>Add Lecture
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Lessons and Lectures Display -->
        <div class="accordion mb-4" id="lessonsAccordion">
            <!-- Lesson 1 -->
            <div class="card border-0 shadow-sm mb-3">
                <div class="card-header bg-white p-0" id="headingOne">
                    <div class="d-flex justify-content-between align-items-center p-3" data-toggle="collapse" 
                        data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne" 
                        style="cursor: pointer;">
                        <div class="d-flex align-items-center">
                            <div class="me-3 text-primary">
                                <i class="fas fa-layer-group fa-lg"></i>
                            </div>
                            <div>
                                <h5 class="mb-0 fw-bold">Lesson 1: Introduction</h5>
                                <small class="text-muted">3 lectures • 45 min total</small>
                            </div>
                        </div>
                        <div>
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </div>
                </div>

                <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#lessonsAccordion">
                    <div class="card-body pt-0">
                        <ul class="list-group list-group-flush">
                            <!-- Lecture 1.1 -->
                            <li class="list-group-item px-0 py-3 border-0 border-bottom">
                                <div class="d-flex align-items-center">
                                    <div class="me-3 text-info">
                                        <i class="fas fa-play-circle fa-lg"></i>
                                    </div>
                                    <div class="flex-grow-1">
                                        <h6 class="mb-0">Course Overview</h6>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <small class="text-muted">Video • 15:30</small>
                                            <div>
                                                <button class="btn btn-sm btn-light me-2" title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-primary" title="Watch" onclick="playVideo('https://www.youtube.com/embed/dQw4w9WgXcQ')">
                                                    <i class="fas fa-play"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </li>
                            
                            <!-- Lecture 1.2 -->
                            <li class="list-group-item px-0 py-3 border-0 border-bottom">
                                <div class="d-flex align-items-center">
                                    <div class="me-3 text-info">
                                        <i class="fas fa-play-circle fa-lg"></i>
                                    </div>
                                    <div class="flex-grow-1">
                                        <h6 class="mb-0">Getting Started</h6>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <small class="text-muted">Video • 12:45</small>
                                            <div>
                                                <button class="btn btn-sm btn-light me-2" title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-primary" title="Watch" onclick="playVideo('https://www.youtube.com/embed/dQw4w9WgXcQ')">
                                                    <i class="fas fa-play"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </li>
                            
                            <!-- Lecture 1.3 -->
                            <li class="list-group-item px-0 py-3 border-0">
                                <div class="d-flex align-items-center">
                                    <div class="me-3 text-warning">
                                        <i class="fas fa-file-pdf fa-lg"></i>
                                    </div>
                                    <div class="flex-grow-1">
                                        <h6 class="mb-0">Course Resources</h6>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <small class="text-muted">PDF • 4 pages</small>
                                            <div>
                                                <button class="btn btn-sm btn-light me-2" title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-primary" title="Download">
                                                    <i class="fas fa-download"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            
            <!-- Lesson 2 -->
            <div class="card border-0 shadow-sm mb-3">
                <div class="card-header bg-white p-0" id="headingTwo">
                    <div class="d-flex justify-content-between align-items-center p-3" data-toggle="collapse" 
                        data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo" 
                        style="cursor: pointer;">
                        <div class="d-flex align-items-center">
                            <div class="me-3 text-primary">
                                <i class="fas fa-layer-group fa-lg"></i>
                            </div>
                            <div>
                                <h5 class="mb-0 fw-bold">Lesson 2: Basic Concepts</h5>
                                <small class="text-muted">2 lectures • 30 min total</small>
                            </div>
                        </div>
                        <div>
                            <i class="fas fa-chevron-down"></i>
                        </div>
                    </div>
                </div>

                <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#lessonsAccordion">
                    <div class="card-body pt-0">
                        <ul class="list-group list-group-flush">
                            <!-- Lecture 2.1 -->
                            <li class="list-group-item px-0 py-3 border-0 border-bottom">
                                <div class="d-flex align-items-center">
                                    <div class="me-3 text-info">
                                        <i class="fas fa-play-circle fa-lg"></i>
                                    </div>
                                    <div class="flex-grow-1">
                                        <h6 class="mb-0">Core Principles</h6>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <small class="text-muted">Video • 18:20</small>
                                            <div>
                                                <button class="btn btn-sm btn-light me-2" title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-primary" title="Watch">
                                                    <i class="fas fa-play"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </li>
                            
                            <!-- Lecture 2.2 -->
                            <li class="list-group-item px-0 py-3 border-0">
                                <div class="d-flex align-items-center">
                                    <div class="me-3 text-info">
                                        <i class="fas fa-play-circle fa-lg"></i>
                                    </div>
                                    <div class="flex-grow-1">
                                        <h6 class="mb-0">Practical Examples</h6>
                                        <div class="d-flex justify-content-between align-items-center">
                                            <small class="text-muted">Video • 11:45</small>
                                            <div>
                                                <button class="btn btn-sm btn-light me-2" title="Edit">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-primary" title="Watch">
                                                    <i class="fas fa-play"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Empty state (shown when no lessons exist) -->
        <div class="text-center py-5 d-none">
            <i class="fas fa-book-open fa-3x text-muted mb-3"></i>
            <h5>No lessons yet</h5>
            <p class="text-muted">Start building your course by creating lessons and adding lectures.</p>
            <button class="btn btn-primary mt-2" data-toggle="modal" data-target="#lessonModal">
                <i class="fas fa-plus me-2"></i>Create your first lesson
            </button>
        </div>
    </div>

    <!-- Tab: Assignment -->
    <div class="tab-pane fade" id="assignment" role="tabpanel" aria-labelledby="assignment-tab">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h3 class="mb-0"><i class="fas fa-tasks text-primary me-2"></i>Assignments</h3>
            <button class="btn btn-primary rounded-pill shadow-sm" data-toggle="modal" data-target="#assignmentModal">
                <i class="fas fa-plus me-2"></i>Create New Assignment
            </button>
        </div>

        <div class="mb-4 p-3 bg-light rounded-lg border-left border-primary" style="border-left-width: 4px !important;">
            <div class="d-flex align-items-center">
                <i class="fas fa-info-circle text-primary me-3 fa-lg"></i>
                <p class="mb-0">Create assignments and track student submissions. Students will be notified when you add new assignments.</p>
            </div>
        </div>

        <!-- Modal: Create Assignment -->
        <div class="modal fade" id="assignmentModal" tabindex="-1" role="dialog" aria-labelledby="assignmentModalLabel"
            aria-hidden="true">
            <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
                <div class="modal-content border-0 shadow">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title" id="assignmentModalLabel">
                            <i class="fas fa-plus-circle me-2"></i>Create a new assignment
                        </h5>
                        <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form id="assignmentForm" enctype="multipart/form-data">
                            @Html.AntiForgeryToken()
                            <div class="mb-3">
                                <label for="ClassRoomId" class="form-label text-muted">Class</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-light"><i class="fas fa-chalkboard-teacher"></i></span>
                                    <input type="text" class="form-control bg-light" value="@Model.ClassRoom.Name" disabled />
                                </div>
                                <input type="hidden" name="ClassRoomId" value="@Model.ClassRoom.Id" />
                            </div>
                            <div class="mb-3">
                                <label for="Title" class="form-label text-muted">Title</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-light"><i class="fas fa-heading"></i></span>
                                    <input type="text" id="assignmentTitle" name="Title" class="form-control" 
                                        placeholder="Enter a clear title for your assignment" required />
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="Description" class="form-label text-muted">Description</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-light"><i class="fas fa-align-left"></i></span>
                                    <textarea id="assignmentDescription" name="Description" class="form-control" rows="5"
                                        placeholder="Describe the assignment tasks, requirements and expectations" required></textarea>
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="FileUrl" class="form-label text-muted">Upload File (Optional)</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-light"><i class="fas fa-file-upload"></i></span>
                                    <input type="file" id="assignmentFileUrl" name="FileUrl" class="form-control" />
                                </div>
                                <small class="text-muted">Attach any supporting documents or reference materials</small>
                            </div>
                            <div class="mb-3">
                                <label for="DueDate" class="form-label text-muted">Due Date</label>
                                <div class="input-group">
                                    <span class="input-group-text bg-light"><i class="fas fa-calendar-alt"></i></span>
                                    <input type="date" id="dueDate" name="DueDate" class="form-control" required />
                                </div>
                            </div>
                            <div class="text-end mt-4">
                                <button type="button" class="btn btn-light me-2" data-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-primary" onclick="createAssignment()">
                                    <i class="fas fa-paper-plane me-2"></i>Create Assignment
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Hiển thị các bài tập đã tạo -->
        <div class="row">
            @if (Model.Assignments != null && Model.Assignments.Any())
            {
                @foreach (var assignment in Model.Assignments)
                {
                    var dueDate = assignment.DueDate;
                    var isOverdue = dueDate < DateTime.Now;
                    var isDueSoon = !isOverdue && dueDate < DateTime.Now.AddDays(3);
                    
                    var statusClass = isOverdue ? "text-danger" : (isDueSoon ? "text-warning" : "text-success");
                    var statusIcon = isOverdue ? "fas fa-exclamation-circle" : (isDueSoon ? "fas fa-clock" : "fas fa-check-circle");
                    var statusText = isOverdue ? "Overdue" : (isDueSoon ? "Due soon" : "Active");
                    
                    <div class="col-md-6 mb-4">
                        <div class="card h-100 border-0 shadow-sm hover-card">
                            <div class="card-header bg-white d-flex justify-content-between align-items-center">
                                <h5 class="mb-0 text-primary">
                                    <i class="fas fa-file-alt me-2"></i>@assignment.Title
                                </h5>
                                <span class="@statusClass">
                                    <i class="@statusIcon me-1"></i>@statusText
                                </span>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <small class="text-muted d-block mb-2">
                                        <i class="fas fa-calendar-day me-2"></i>Due: @assignment.DueDate.ToString("dd MMM yyyy, hh:mm tt")
                                    </small>
                                    <div class="progress" style="height: 5px;">
                                        <div class="progress-bar @(isOverdue ? "bg-danger" : (isDueSoon ? "bg-warning" : "bg-success"))" 
                                            role="progressbar" style="width: @(isOverdue ? "100" : (isDueSoon ? "75" : "25"))%"></div>
                                    </div>
                                </div>
                                
                                <p class="card-text">@(assignment.Description.Length > 100 ? assignment.Description.Substring(0, 100) + "..." : assignment.Description)</p>
                                
                                <div class="d-flex mt-3 justify-content-between align-items-center">
                                    @if (!string.IsNullOrEmpty(assignment.FileUrl))
                                    {
                                        <a href="@assignment.FileUrl" class="btn btn-sm btn-light">
                                            <i class="fas fa-download me-1"></i>Download
                                        </a>
                                    }
                                    else
                                    {
                                        <span></span>
                                    }
                                    
                                    <a href="@Url.Action("Details", "Assignments", new { id = assignment.Id })" class="btn btn-sm btn-primary">
                                        <i class="fas fa-eye me-1"></i>View Details
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12">
                    <div class="text-center py-5 bg-light rounded-lg">
                        <i class="fas fa-tasks fa-3x text-muted mb-3"></i>
                        <h5>No assignments yet</h5>
                        <p class="text-muted">Create your first assignment by clicking the button above.</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<div>
    <hr />
</div>

@section Scripts {
    <script>
        function showToast(message, type = 'info', duration = 5000) {
            var toastEl = document.getElementById('adminToast');
            var toastBody = document.getElementById('toastMessage');
            var toastContainer = toastEl.querySelector('.toast');

            // Cập nhật nội dung thông báo
            toastBody.innerText = message;

            // Xóa class màu cũ trước khi thêm mới
            toastContainer.classList.remove('bg-success', 'bg-danger', 'bg-warning', 'bg-info', 'bg-primary', 'bg-dark');

            // Gán màu theo loại thông báo
            switch (type) {
                case 'success':
                    toastContainer.classList.add('bg-success'); // Xanh lá
                    break;
                case 'error':
                    toastContainer.classList.add('bg-danger'); // Đỏ
                    break;
                case 'warning':
                    toastContainer.classList.add('bg-warning'); // Vàng
                    break;
                case 'info':
                    toastContainer.classList.add('bg-info'); // Xanh dương
                    break;
                default:
                    toastContainer.classList.add('bg-dark'); // Màu tối (mặc định)
            }

            // **Tạo instance Bootstrap Toast**
            var toastInstance = new bootstrap.Toast(toastContainer, {
                autohide: duration > 0, // Nếu duration = 0, không tự động ẩn
                delay: duration || 5000 // Mặc định 5 giây
            });

            // Hiển thị Toast
            toastInstance.show();
        }

        function createPost() {
            var form = $('#postModal form');
            $.ajax({
                url: '@Url.Action("Create", "Posts")',  // URL của phương thức Create
                type: 'POST',
                data: form.serialize(),
                success: function (result) {
                    if (result.success) {
                        $('#postModal').modal('hide');
                        alert(result.message);  // Hiển thị thông báo thành công
                        location.reload();  // Reload trang hoặc cập nhật danh sách bài viết theo yêu cầu
                    }
                },
                error: function () {
                    alert('Có lỗi xảy ra khi tạo bài viết.');
                }
            });
        }

        function createLecture() {
            // TODO: Implement lecture creation logic
            alert('Feature will be implemented soon!');
        }

        function createLesson() {
            // TODO: Implement lesson creation logic
            alert('Feature will be implemented soon!');
        }

        function toggleContentType() {
            // Hide all content type sections
            document.querySelectorAll('.content-type-section').forEach(section => {
                section.style.display = 'none';
            });
            
            // Show the selected section
            const contentType = document.querySelector('input[name="contentType"]:checked').value;
            
            if (contentType === 'videoUrl') {
                document.getElementById('videoUrlContent').style.display = 'block';
            } else if (contentType === 'upload') {
                document.getElementById('uploadContent').style.display = 'block';
            } else if (contentType === 'text') {
                document.getElementById('textContent').style.display = 'block';
            }
        }

        function playVideo(videoUrl, title = 'Lecture Video') {
            const modal = $('#videoPlayerModal');
            document.getElementById('videoTitle').textContent = title;
            document.getElementById('videoFrame').src = videoUrl;
            modal.modal('show');
        }

        function stopVideo() {
            document.getElementById('videoFrame').src = '';
        }

        // Handle closing the video when the modal is hidden
        $('#videoPlayerModal').on('hidden.bs.modal', function () {
            stopVideo();
        });

        function createAssignment() {
            var title = $('#assignmentTitle').val();
            var description = $('#assignmentDescription').val();
            var fileUrl = $('#assignmentFileUrl').val();
            var dueDate = $('#dueDate').val();
            var classRoomId = $('input[name="ClassRoomId"]').val();  // ClassRoomId dưới dạng GUID

            // Kiểm tra nếu có trường nào bị rỗng
            if (!title || !description || !dueDate || !classRoomId) {
                alert("Vui lòng điền đầy đủ thông tin.");
                return;
            }

            // Gửi dữ liệu qua AJAX
            $.ajax({
                url: '@Url.Action("Create", "Assignments")',
                type: 'POST',
                data: {
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val(),
                    Title: title,
                    Description: description,
                    FileUrl: fileUrl,
                    DueDate: dueDate,
                    ClassRoomId: classRoomId  // Đảm bảo là GUID hợp lệ
                },
                success: function (result) {
                    if (result.success) {
                        $('#assignmentModal').modal('hide');
                        alert("Bài tập đã được tạo thành công!");
                        location.reload();  // Reload lại trang để hiển thị bài tập mới
                    } else {
                        alert("Có lỗi xảy ra khi tạo bài tập: " + result.message);
                    }
                },
                error: function () {
                    alert('Có lỗi xảy ra khi gửi yêu cầu tạo bài tập.');
                }
            });
        }

        function deletePost(postId) {
            if (!confirm("Bạn có chắc muốn xóa bài viết này?")) {
                return;
            }

            $.ajax({
                url: '@Url.Action("Delete", "Posts")',
                type: 'POST',
                data: { id: postId, __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() },
                success: function (result) {
                    if (result.success) {
                        alert(result.message);
                        location.reload();
                    } else {
                        alert("Lỗi: " + result.message);
                    }
                },
                error: function () {
                    alert('Có lỗi xảy ra khi xóa bài viết.');
                }
            });
        }

        function copyCodeToClipboard(code) {
            navigator.clipboard.writeText(code).then(function () {
                showToast('Code copied to clipboard!');
            }, function (err) {
                console.error('Could not copy text: ', err);
            });
        }
        function changeCode(classRoomId) {
            if (!confirm("Bạn có chắc muốn đổi mã lớp không?")) return;

            $.ajax({
                url: '@Url.Action("ChangeCode", "ClassRooms")',
                type: 'POST',
                data: { id: classRoomId },
                success: function (response) {
                    if (response.success) {
                        $('#classCodeDisplay').text(response.newCode);
                        showToast("Mã lớp đã được cập nhật!", "success");
                    } else {
                        showToast("Lỗi khi đổi mã lớp!", "error");
                    }
                },
                error: function () {
                    showToast("Có lỗi xảy ra, vui lòng thử lại!", "error");
                }
            });
        }
        function showToast(message, type = 'info', duration = 5000) {
            var toastEl = document.getElementById('adminToast');
            var toastBody = document.getElementById('toastMessage');
            var toastContainer = toastEl.querySelector('.toast');

            toastBody.innerText = message;
            toastContainer.classList.remove('bg-success', 'bg-danger', 'bg-warning', 'bg-info', 'bg-primary', 'bg-dark');

            switch (type) {
                case 'success': toastContainer.classList.add('bg-success'); break;
                case 'error': toastContainer.classList.add('bg-danger'); break;
                case 'warning': toastContainer.classList.add('bg-warning'); break;
                case 'info': toastContainer.classList.add('bg-info'); break;
                default: toastContainer.classList.add('bg-dark');
            }

            var toastInstance = new bootstrap.Toast(toastContainer, { autohide: duration > 0, delay: duration || 5000 });
            toastInstance.show();
        }
        var editor = new FroalaEditor('#postMessage', {
            imageUploadURL: '/File/UploadImage',
            videoUploadURL: '/File/UploadVideo',
            imageDeleteURL: '/File/DeleteFile',
            imageAllowedTypes: ['jpeg', 'jpg', 'png', 'gif'],
            videoAllowedTypes: ['mp4', 'webm', 'ogg'],
            toolbarButtons: ['bold', 'italic', 'underline', 'strikeThrough', 'align', 'undo', 'redo'],
            pastePlain: true,
            placeholderText: 'Input your message...',
        });

        // Initialize Froala Editor for lecture content
        if (document.getElementById('lectureContent')) {
            var lectureEditor = new FroalaEditor('#lectureContent', {
                imageUploadURL: '/File/UploadImage',
                videoUploadURL: '/File/UploadVideo',
                imageAllowedTypes: ['jpeg', 'jpg', 'png', 'gif'],
                videoAllowedTypes: ['mp4', 'webm', 'ogg'],
                toolbarButtons: ['bold', 'italic', 'underline', 'strikeThrough', 'align', 'undo', 'redo'],
                pastePlain: true,
                placeholderText: 'Input lecture content...',
            });
        }

        // Like post functionality
        function likePost(postId) {
            const likeButton = document.querySelector(`.like-button[data-post-id="${postId}"]`);
            const likeCountEl = likeButton.querySelector('.like-count');

            // Toggle the like button style
            if (likeButton.classList.contains('text-primary')) {
                likeButton.classList.remove('text-primary');
                likeButton.querySelector('i').classList.remove('fas');
                likeButton.querySelector('i').classList.add('far');
                likeCountEl.textContent = Math.max(0, parseInt(likeCountEl.textContent) - 1);
            } else {
                likeButton.classList.add('text-primary');
                likeButton.querySelector('i').classList.remove('far');
                likeButton.querySelector('i').classList.add('fas');
                likeCountEl.textContent = parseInt(likeCountEl.textContent) + 1;
            }

            // In a real implementation, you would send this to the server
            // $.ajax({
            //     url: '@Url.Action("LikePost", "Posts")',
            //     type: 'POST',
            //     data: { 
            //         postId: postId,
            //         __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() 
            //     },
            //     success: function(result) {
            //         // Handle the success response
            //     }
            // });
        }

        // Toggle comments section
        function toggleComments(postId) {
            const commentsSection = document.getElementById(`comments-section-${postId}`);
            if (commentsSection.style.display === 'none') {
                commentsSection.style.display = 'block';
                // Load comments from server
                loadComments(postId);
            } else {
                commentsSection.style.display = 'none';
            }
        }

        // Add comment - updated to save to database
        function addComment(postId) {
            const commentText = document.getElementById(`comment-text-${postId}`).value.trim();
            if (!commentText) return;

            // Show loading indicator
            const sendButton = document.querySelector(`#comment-text-${postId}`).nextElementSibling.querySelector('button');
            const originalButtonContent = sendButton.innerHTML;
            sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            sendButton.disabled = true;

            // Send to server
            $.ajax({
                url: '@Url.Action("AddComment", "Comments")',
                type: 'POST',
                data: {
                    postId: postId,
                    classRoomId: '@Model.ClassRoom.Id',
                    content: commentText,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (result) {
                    if (result.success) {
                        // Clear the "no comments" message if present
                        const commentsContainer = document.getElementById(`comments-container-${postId}`);
                        if (commentsContainer.querySelector('.text-center.text-muted')) {
                            commentsContainer.innerHTML = '';
                        }

                        // Add the new comment with data from the server
                        const commentDiv = document.createElement('div');
                        commentDiv.className = 'media mb-3';
                        commentDiv.innerHTML = `
                                        <img src="${result.userImage || '@Url.Content("~/files/assets/images/user.png")'}" 
                                             class="mr-3 rounded-circle" 
                                             style="width: 40px; height: 40px; object-fit: cover;">
                                        <div class="media-body">
                                            <div class="bg-light rounded p-2">
                                                <h6 class="mt-0 mb-1 font-weight-bold">${result.userName}</h6>
                                                <p class="mb-0">${result.content}</p>
                                            </div>
                                            <small class="text-muted">${result.createdAt}</small>
                                        </div>
                                    `;

                        commentsContainer.appendChild(commentDiv);
                        document.getElementById(`comment-text-${postId}`).value = '';

                        // Show success toast
                        showToast('Comment added successfully', 'success');
                    } else {
                        showToast('Error: ' + result.message, 'error');
                    }
                },
                error: function () {
                    showToast('Failed to add comment', 'error');
                },
                complete: function () {
                    // Restore button
                    sendButton.innerHTML = originalButtonContent;
                    sendButton.disabled = false;
                }
            });
        }

        // Load comments from database
        function loadComments(postId) {
            const commentsContainer = document.getElementById(`comments-container-${postId}`);
            commentsContainer.innerHTML = '<div class="text-center py-3"><i class="fas fa-spinner fa-spin"></i><br>Loading comments...</div>';

            $.ajax({
                url: '@Url.Action("GetComments", "Comments")',
                type: 'GET',
                data: {
                    postId: postId,
                    classRoomId: '@Model.ClassRoom.Id'
                },
                success: function (result) {
                    if (result.success) {
                        if (result.comments.length === 0) {
                            commentsContainer.innerHTML = `
                                            <div class="text-center text-muted py-3">
                                                <p><i class="far fa-comment-dots fa-2x mb-2"></i><br>No comments yet</p>
                                            </div>
                                        `;
                            return;
                        }

                        commentsContainer.innerHTML = '';

                        // Add each comment from the server
                        result.comments.forEach(comment => {
                            const commentDiv = document.createElement('div');
                            commentDiv.className = 'media mb-3';
                            commentDiv.innerHTML = `
                                            <img src="${comment.userImage || '@Url.Content("~/files/assets/images/user.png")'}" 
                                                 class="mr-3 rounded-circle" 
                                                 style="width: 40px; height: 40px; object-fit: cover;">
                                            <div class="media-body">
                                                <div class="bg-light rounded p-2">
                                                    <h6 class="mt-0 mb-1 font-weight-bold">${comment.userName}</h6>
                                                    <p class="mb-0">${comment.content}</p>
                                                </div>
                                                <small class="text-muted">${comment.createdAt}</small>
                                            </div>
                                        `;

                            commentsContainer.appendChild(commentDiv);
                        });
                    } else {
                        commentsContainer.innerHTML = `
                                        <div class="alert alert-danger">
                                            Failed to load comments: ${result.message}
                                        </div>
                                    `;
                    }
                },
                error: function () {
                    commentsContainer.innerHTML = `
                                    <div class="alert alert-danger">
                                        Failed to load comments. Please try again.
                                    </div>
                                `;
                }
            });
        }

        // Search members functionality
        function searchMembers(query) {
            query = query.toLowerCase().trim();
            const memberItems = document.querySelectorAll('.member-item');
            const noMembersFound = document.getElementById('no-members-found');
            let foundCount = 0;

            memberItems.forEach(item => {
                const username = item.getAttribute('data-username');
                const fullname = item.getAttribute('data-fullname');

                if (username.includes(query) || fullname.includes(query) || query === '') {
                    item.style.display = 'flex';
                    foundCount++;
                } else {
                    item.style.display = 'none';
                }
            });

            // Show or hide "No members found" message
            if (foundCount === 0 && query !== '') {
                noMembersFound.classList.remove('d-none');
            } else {
                noMembersFound.classList.add('d-none');
            }
        }

        // Initialize like counts from server data (this would normally come from your backend)
        document.addEventListener('DOMContentLoaded', function () {
            // This is a simulation for demonstration purposes
            const likeCounts = document.querySelectorAll('.like-count');
            likeCounts.forEach(count => {
                // Random initial like count for demo purposes
                count.textContent = Math.floor(Math.random() * 10);
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            $('#post-tab').on('click', function () {
                $('#assignment').removeClass('show active');
                $('#lecture').removeClass('show active');
                $('#participants').removeClass('show active');
                $('#post').addClass('show active');
            });

            $('#assignment-tab').on('click', function () {
                $('#post').removeClass('show active');
                $('#lecture').removeClass('show active');
                $('#participants').removeClass('show active');
                $('#assignment').addClass('show active');
            });

            $('#lecture-tab').on('click', function () {
                $('#post').removeClass('show active');
                $('#assignment').removeClass('show active');
                $('#participants').removeClass('show active');
                $('#lecture').addClass('show active');
            });

            $('#participants-tab').on('click', function () {
                $('#post').removeClass('show active');
                $('#assignment').removeClass('show active');
                $('#lecture').removeClass('show active');
                $('#participants').addClass('show active');
            });
        });
    </script>
    <style>
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
        }
    </style>

    <!-- Video Player Modal -->
    <div class="modal fade" id="videoPlayerModal" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content border-0 shadow">
                <div class="modal-header bg-dark text-white">
                    <h5 class="modal-title">
                        <i class="fas fa-play-circle me-2"></i><span id="videoTitle">Lecture Video</span>
                    </h5>
                    <button type="button" class="close text-white" data-dismiss="modal" aria-label="Close" onclick="stopVideo()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body p-0">
                    <div class="ratio ratio-16x9">
                        <iframe id="videoFrame" src="" allowfullscreen></iframe>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
