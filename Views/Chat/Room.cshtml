@model LMS.Data.Entities.ChatRoom

@{
    ViewData["Title"] = Model.Name;
}

@section Styles {
    <style>
        .chat-container {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 200px);
            max-width: 1000px;
            margin: 20px auto;
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .chat-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            border-bottom: 1px solid #eaeaea;
            background: #f8f9fa;
            border-radius: 8px 8px 0 0;
        }

        .chat-title {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .chat-title h4 {
            margin: 0;
            color: #333;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin-bottom: 10px;
        }

        .message {
            max-width: 70%;
            padding: 10px 15px;
            border-radius: 15px;
            position: relative;
        }

        .message-sent {
            align-self: flex-end;
            background-color: #3f51b5;
            color: white;
        }

        .message-received {
            align-self: flex-start;
            background-color: #f1f1f1;
            color: #333;
        }

        .message-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 5px;
            font-size: 0.8em;
        }

        .message-sent .message-header {
            color: rgba(255, 255, 255, 0.8);
        }

        .message-received .message-header {
            color: #666;
        }

        .message-text {
            word-wrap: break-word;
        }

        .chat-input-container {
            padding: 15px;
            border-top: 1px solid #eaeaea;
            background: #f8f9fa;
            border-radius: 0 0 8px 8px;
            position: relative;
        }

        .input-wrapper {
            position: relative;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .input-group {
            flex: 1;
            display: flex;
            gap: 10px;
        }

        .form-control {
            border-radius: 20px;
            padding: 10px 15px;
            border: 1px solid #eaeaea;
        }

        .form-control:focus {
            border-color: #3f51b5;
            box-shadow: 0 0 0 0.2rem rgba(63, 81, 181, 0.25);
        }

        .btn-primary {
            border-radius: 20px;
            padding: 10px 20px;
            background-color: #3f51b5;
            border-color: #3f51b5;
        }

        .btn-primary:hover {
            background-color: #303f9f;
            border-color: #303f9f;
        }

        .btn-outline-danger {
            border-radius: 20px;
        }

        #userCount {
            font-size: 0.8em;
            padding: 5px 10px;
        }

        .send-button {
            width: 40px;
            height: 40px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            flex-shrink: 0;
        }

        .send-button i {
            font-size: 1.2em;
            transform: rotate(-45deg) translateX(-2px);
            color: white;
        }

        .send-button:hover {
            transform: scale(1.05);
            background-color: #303f9f;
        }

        .message-system {
            align-self: center;
            background-color: #f8f9fa;
            color: #666;
            padding: 5px 10px;
            border-radius: 10px;
            font-size: 0.9em;
            max-width: 80%;
            text-align: center;
        }
    </style>
}

<div class="chat-container">
    <div class="chat-header">
        <div class="chat-title">
            <h4>@Model.Name</h4>
            <span class="badge bg-primary" id="userCount">1</span>
        </div>
        <button id="leaveRoom" class="btn btn-outline-danger btn-sm">
            <i class="feather icon-log-out"></i> Rời phòng
        </button>
    </div>

    <div class="chat-messages" id="chatBox">
        @foreach (var msg in Model.Messages!)
        {
            <div class="message @(msg.UserId == User.Identity!.Name ? "message-sent" : "message-received")">
                <div class="message-content">
                    <div class="message-header">
                        <span class="message-sender">@msg.UserId</span>
                        <span class="message-time">@msg.Timestamp.ToString("HH:mm")</span>
                    </div>
                    <div class="message-text">@msg.Content</div>
                </div>
            </div>
        }
    </div>

    <div class="chat-input-container">
        <div class="input-wrapper">
            <div class="input-group">
                <input type="text" id="messageInput" class="form-control" placeholder="Nhập tin nhắn..." />
                <button id="sendButton" class="btn btn-primary send-button">
                    <i class="feather icon-navigation"></i>
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.7/signalr.min.js"></script>
    <script>
        var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();
        var roomId = @Model.Id;
        var userName = "@User.Identity!.Name";
        var userCount = 1;

        // Initialize SignalR connection
        connection.start().then(function () {
            connection.invoke("JoinRoom", roomId);
        }).catch(function (err) {
            console.error(err.toString());
        });

        // Send message
        document.getElementById("sendButton").addEventListener("click", function () {
            var message = document.getElementById("messageInput").value;
            if (message.trim() !== "") {
                connection.invoke("SendMessage", roomId, userName, message);
                document.getElementById("messageInput").value = "";
            }
        });

        // Send message on Enter key
        document.getElementById("messageInput").addEventListener("keypress", function (e) {
            if (e.key === "Enter") {
                document.getElementById("sendButton").click();
            }
        });

        // Leave room
        document.getElementById("leaveRoom").addEventListener("click", function () {
            connection.invoke("LeaveRoom", roomId).then(function () {
                window.location.href = "/Chat/Index";
            });
        });

        // Receive message
        connection.on("ReceiveMessage", function (user, message, time) {
            var messageClass = user === userName ? "message-sent" : "message-received";
            var newMessage = `
                                                        <div class="message ${messageClass}">
                                                            <div class="message-content">
                                                                <div class="message-header">
                                                                    <span class="message-sender">${user}</span>
                                                                    <span class="message-time">${time}</span>
                                                                </div>
                                                                <div class="message-text">${message}</div>
                                                            </div>
                                                        </div>
                                                    `;
            document.getElementById("chatBox").innerHTML += newMessage;
            scrollToBottom();
        });

        // User joined
        connection.on("UserJoined", function (message) {
            userCount++;
            updateUserCount();
            var systemMessage = `
                                                        <div class="message message-system">
                                                            <div class="message-content">
                                                                <div class="message-text">${message}</div>
                                                            </div>
                                                        </div>
                                                    `;
            document.getElementById("chatBox").innerHTML += systemMessage;
            scrollToBottom();
        });

        // User left
        connection.on("UserLeft", function (message) {
            userCount--;
            updateUserCount();
            var systemMessage = `
                                                        <div class="message message-system">
                                                            <div class="message-content">
                                                                <div class="message-text">${message}</div>
                                                            </div>
                                                        </div>
                                                    `;
            document.getElementById("chatBox").innerHTML += systemMessage;
            scrollToBottom();
        });

        function scrollToBottom() {
            var chatBox = document.getElementById("chatBox");
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        function updateUserCount() {
            document.getElementById("userCount").textContent = userCount;
        }

        // Initial scroll to bottom
        scrollToBottom();
    </script>
}
